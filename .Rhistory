source('C:/Users/karliane/Dropbox/doutorado/tese/experimentos/scripts/segunda tentativa - unirotulo/experimentos_karliane_implementando_self_train.R', echo=TRUE)
#PROBLEMAS A RESOLVER
#karliane - tentar pegar os resultados (acuracia) - ver base teste script alexandre
#alan - aprender como colocar os resultados em uma matriz e depois em um arquivo
#alan - incluir as demais bases nesse script
#karliane e alan - aprender a usar outros classificadores que não seja arvore
#dividir a base em treinamento e teste, o q eu fiz não tá certo.
#1 - transformar os atributos não numéricos em numéricos - tentar filtro weka - alan achou paleativo, usaremos de acordo com a necessidade
#2 - descobrir pq a confiança da iris só dá 1 - resolvido, não sei como...
#bases de dados
#bupa, cleveland, ecoli, glass, haberman, iris, monk, pima, vehide, wisconsin
#diretório local para salvar as bases e resultados
setwd("C:\\local_R")
print("instalação dos pacotes")
#pacote que inclui: data splitting, pre-processing, feature selection, model tuning using resampling, variable importance estimation
#install.packages("caret")
#install.packages("caret", dependencies = c("Depends", "Suggests"))
#pacote que inclui self-training e outros algoritmos de aprendizado semisupervisionado
#install.packages("ssc")
#install.packages("DMwR")
#install.packages("caTools")
#install.packages("RWeka")
print("carregar os pacotes")
library("caret") #parece não ser necessário
library("ssc") #esse é obrigatório
library("plyr") #pacote q tem a função join_all
library("RWeka")
#USANDO A FUNÇÃO SELFTRAIN (USADA POR ALEXANDRE)
library("DMwR2")
library("DMwR")
library("datasets")
print("Função para pegar a base de dados e colocar em uma variável base")
getdata <- function(...)
{
e <- new.env()
name <- data(..., envir = e)[1]
e[[name]]
}
#variaveis para guardar e gravar no arquivo
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
for (i in 1:6){
print("organizando os dados")
if (i==1) {
#base de dados IRIS
base_original <- getdata("iris")
classe <- "Species"
}else if (i==2){
#base de dados ECOLI
base_original <- read.arff("ecoli.arff")
classe <- "class"
}
else if(i==3){
base_original <- read.arff("bupa.arff");
classe <- "selector"
}
else if(i==4){
base_original <- read.arff("glass.arff")
classe <- "Type"
}
else if(i==5){
base_original <- read.arff("haberman.arff")
classe <-"Survival_status"
}
else if(i==6){
base_original <-read.arff("pima.arff")
classe <- "class"
}
else if(i==7){
base_original <-read.arff("cleveland.arff")
classe <- "num"
}
#tentando usar filtro do weka para transformar dados nominais em binarios
#nombi <- make_Weka_filter("weka/filters/supervised/attribute/NominalToBinary") # creates an R interface to the WEKA filter
#datbin <- nombi(AT1 ~., data=base, control =Weka_control(N=TRUE, A=TRUE)) # Fehlermeldung
#datbin
#NÃO ESTÁ CERTO ASSIM, POIS ALGUNS EXEMPLOS NÃO ESTÃO SENDO USADOS NO TREINAMENTO NUNCA E OUTROS ESTÃO APARECENDO MAIS DE UMA VEZ
set.seed(100)
if (i==1){
indice_treinamento <- createDataPartition(base_original$Species, p=0.75, list=FALSE)
}else if (i==2){
indice_treinamento <- createDataPartition(base_original$class, p=0.75, list=FALSE)
}
base <- base_original[indice_treinamento,]
base_teste <- base_original[-indice_treinamento,]
#PRECISO RENUMERAR OS INDICES, TANTO DE TREINAMENTO QUANTO DE TESTE
setwd("C:\\local_R")
print("instalação dos pacotes")
#pacote que inclui: data splitting, pre-processing, feature selection, model tuning using resampling, variable importance estimation
#install.packages("caret")
#install.packages("caret", dependencies = c("Depends", "Suggests"))
#pacote que inclui self-training e outros algoritmos de aprendizado semisupervisionado
#install.packages("ssc")
#install.packages("DMwR")
#install.packages("caTools")
#install.packages("RWeka")
print("carregar os pacotes")
library("caret") #parece não ser necessário
library("ssc") #esse é obrigatório
library("plyr") #pacote q tem a função join_all
library("RWeka")
#USANDO A FUNÇÃO SELFTRAIN (USADA POR ALEXANDRE)
library("DMwR2")
library("DMwR")
library("datasets")
print("Função para pegar a base de dados e colocar em uma variável base")
getdata <- function(...)
{
e <- new.env()
name <- data(..., envir = e)[1]
e[[name]]
}
#variaveis para guardar e gravar no arquivo
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
source('C:/Users/karliane/Dropbox/doutorado/tese/experimentos/scripts/segunda tentativa - unirotulo/experimentos_karliane_implementando_self_train.R', echo=TRUE)
source('C:/Users/karliane/Dropbox/doutorado/tese/experimentos/scripts/segunda tentativa - unirotulo/experimentos_karliane_implementando_self_train.R', echo=TRUE)
source('C:/Users/karliane/Dropbox/doutorado/tese/experimentos/scripts/segunda tentativa - unirotulo/experimentos_karliane_implementando_self_train.R', echo=TRUE)
source('C:/Users/karliane/Dropbox/doutorado/tese/experimentos/scripts/segunda tentativa - unirotulo/experimentos_karliane_implementando_self_train.R', echo=TRUE)
source('C:/Users/karliane/Dropbox/doutorado/tese/experimentos/scripts/segunda tentativa - unirotulo/experimentos_karliane_implementando_self_train.R', echo=TRUE)
probPreds
source('C:/Users/karliane/Dropbox/doutorado/tese/experimentos/scripts/segunda tentativa - unirotulo/experimentos_karliane_implementando_self_train.R', echo=TRUE)
probPreds
source('C:/Users/karliane/Dropbox/doutorado/tese/experimentos/scripts/segunda tentativa - unirotulo/experimentos_karliane_implementando_self_train.R', echo=TRUE)
probPreds
source('C:/Users/karliane/Dropbox/doutorado/tese/experimentos/scripts/segunda tentativa - unirotulo/experimentos_karliane_implementando_self_train.R', echo=TRUE)
source('C:/Users/karliane/Dropbox/doutorado/tese/experimentos/scripts/segunda tentativa - unirotulo/experimentos_karliane_implementando_self_train.R', echo=TRUE)
source('C:/local_R/projeto_karliane/scripts_comuns/funcoes.R')
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
debugSource('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
id_conj_treino_antigo
id_conj_treino
source('C:/local_R/projeto_karliane/scripts_comuns/funcoes.R', echo=TRUE)
debugSource('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
conj_treino
nrow(conj_treino)
conj_treino
nrow(conj_treino)
classificar
treino_valido
debugSource('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
treino_valido
treino_valido
id_conj_treino
id_conj_treino_antigo
conj_treino
rpartXse(as.factor(class) ~ .,conj_treino)
debugSource('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
classificar
