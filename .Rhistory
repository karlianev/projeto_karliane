source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
teste<-c()
teste2<-c()
source('C:/local_R/projeto_karliane/selftrain_modificado2/configuracoes.R')
source('C:/local_R/projeto_karliane/selftrain_modificado2/funcoes.R')
t=1
k=2
i=7
j=2
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
taxa <- j*5
source('C:/local_R/projeto_karliane/selftrain_modificado2/carrega_dados.R')
source('C:/local_R/projeto_karliane/selftrain_modificado2/organiza_dados.R')
form = as.formula(paste(classe,'~', '.'))
data = base_treino_self_training
learner = learner('rpartXse',list(se=0.5))
predFunc = 'f'
thrConf=0.9
maxIts=10
percFull=1
verbose=F
N <- NROW(data)
N_instancias_por_classe <- ddply(data,~class,summarise,number_of_distinct_orders=length(class))
N_classes <- NROW(N_instancias_por_classe)-1 # uso do -1 pq N_instancias_por_classe tem uma linha com a quantidade de exemplos não rotulados
it <- 0
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
totalrot <- 0
conj_treino <- c()
sup <- which(!is.na(data[,as.character(form[[2]])])) #sup recebe o indice de todos os exemplos rotulados
it <- it+1
it
qtd_Exemplos_Rot
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
nrow(data[new,])
N_classes*5
conj_treino <- data[new,]
classificador <- rpartXse(as.factor(class) ~ .,conj_treino)
matriz <- table(predict(classificador,base_rotulados_ini, type="vector"),base_rotulados_ini$class)
acc_local <- ((sum(diag(matriz)) / length(base_rotulados_ini$class)) * 100)
acc_local
if(acc_local>=50){
thrConf<-thrConf-0.05
}else{
thrConf<-thrConf+0.05
}
thrConf
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
if (nrow(data[new,]) >= N_classes*5){
#o conjunto de treinamento serao as instancias incluÃ�das (rotuladas)
conj_treino <- data[new,]
}else if (length(conj_treino)>=1) {
#o conjunto de treinamento serÃ¡ o anterior + as instancias incluidas (rotuladas)
conj_treino <- rbind(data[new,],conj_treino)
cat("juntou", nrow(conj_treino), "\n")
}else break
classificador <- rpartXse(as.factor(class) ~ .,conj_treino)
conj_treino
as.factor(class) ~ .
classificador <- rpartXse(as.factor(class) ~ .,conj_treino)
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
teste<-c()
teste2<-c()
source('C:/local_R/projeto_karliane/selftrain_modificado2/configuracoes.R')
# source('~/R/karliane/projeto_karliane/nayves_bayes/configuracoes.R')
source('C:/local_R/projeto_karliane/selftrain_modificado2/funcoes.R')
# source('~/R/karliane/projeto_karliane/nayves_bayes/funcoes.R')
t=1
k=2
i=7
j=2
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
taxa <- j*5
base_original <-read.arff("pima.arff")
bd_nome <- "pima"
source('C:/local_R/projeto_karliane/selftrain_modificado2/organiza_dados.R')
form = as.formula(paste(classe,'~', '.'))
data = base_treino_self_training
learner = learner('rpartXse',list(se=0.5))
predFunc = 'f'
thrConf=0.9
maxIts=10
percFull=1
verbose=F
N <- NROW(data)
N_instancias_por_classe <- ddply(data,~class,summarise,number_of_distinct_orders=length(class))
N_classes <- NROW(N_instancias_por_classe)-1 # uso do -1 pq N_instancias_por_classe tem uma linha com a quantidade de exemplos não rotulados
it <- 0
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
totalrot <- 0
conj_treino <- c()
sup <- which(!is.na(data[,as.character(form[[2]])])) #sup recebe o indice de todos os exemplos rotulados
sup
data[sup]$class
data[sup]
data([sup])
data(sup)
data[sup,]
it <- it+1
it
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
data[new,]
nrow(data[new,]) >= N_classes*5
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
teste<-c()
teste2<-c()
source('C:/local_R/projeto_karliane/selftrain_modificado2/configuracoes.R')
# source('~/R/karliane/projeto_karliane/nayves_bayes/configuracoes.R')
source('C:/local_R/projeto_karliane/selftrain_modificado2/funcoes.R')
# source('~/R/karliane/projeto_karliane/nayves_bayes/funcoes.R')
t=1
k=2
i=7
j=2
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
taxa <- j*5
source('C:/local_R/projeto_karliane/selftrain_modificado2/carrega_dados.R')
source('C:/local_R/projeto_karliane/selftrain_modificado2/organiza_dados.R')
form = as.formula(paste(classe,'~', '.'))
data = base_treino_self_training
learner = learner('rpartXse',list(se=0.5))
predFunc = 'f'
thrConf=0.9
maxIts=10
percFull=1
verbose=F
N <- NROW(data)
N_instancias_por_classe <- ddply(data,~class,summarise,number_of_distinct_orders=length(class))
N_classes <- NROW(N_instancias_por_classe)-1 # uso do -1 pq N_instancias_por_classe tem uma linha com a quantidade de exemplos não rotulados
it <- 0
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
totalrot <- 0
conj_treino <- c()
sup <- which(!is.na(data[,as.character(form[[2]])])) #sup recebe o indice de todos os exemplos rotulados
it <- it+1
if ((it>1)&&(qtd_Exemplos_Rot>0)){
#data[sup,] corresponde os que possuem rotulos (INICIALMENTE ROTULADOS OU NÃO)
if (nrow(data[new,]) >= N_classes*5){
#o conjunto de treinamento serao as instancias incluÃ�das (rotuladas)
conj_treino <- data[new,]
}else if (length(conj_treino)>=1) {
#o conjunto de treinamento serÃ¡ o anterior + as instancias incluidas (rotuladas)
conj_treino <- rbind(data[new,],conj_treino)
cat("juntou", nrow(conj_treino), "\n")
}else break
if(k==1){
classificador <- naiveBayes(as.factor(class) ~ .,conj_treino)
matriz <- table(predict(classificador,base_rotulados_ini),base_rotulados_ini$class)
}
else{
#IMPLEMENTAR ARVORE DE DECISÃO
classificador <- rpartXse(as.factor(class) ~ .,conj_treino)
matriz <- table(predict(classificador,base_rotulados_ini, type="vector"),base_rotulados_ini$class)
}
acc_local <- ((sum(diag(matriz)) / length(base_rotulados_ini$class)) * 100)
if(acc_local>=50){
thrConf<-thrConf-0.05
}else{
thrConf<-thrConf+0.05
}
}
debugSource('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
debugSource('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
conj_treino
as.character(probPreds[new,1])
data[(1:N)[-sup][new],as.character(form[[2]])]
data[new,]
matriz
conj_treino
as.factor(class) ~ .
conj_treino
matriz
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
teste<-c()
teste2<-c()
source('C:/local_R/projeto_karliane/selftrain_modificado2/configuracoes.R')
# source('~/R/karliane/projeto_karliane/nayves_bayes/configuracoes.R')
source('C:/local_R/projeto_karliane/selftrain_modificado2/funcoes.R')
# source('~/R/karliane/projeto_karliane/nayves_bayes/funcoes.R')
t=1
k=2
i=11
j=2
debugSource('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
conj_treino
matriz
data[sup,]
debugSource('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
base_treino_self_training
base_original <-read.arff("car.arff")
bd_nome <- "car"
base_original$class
exemplos = nrow(base_original)
H <- holdout(base_original$class, ratio = 0.75, mode="stratified")
base <- base_original[H$tr,]
base_teste <- base_original[H$ts,]
H
base
base$class
base_teste$class
ids_treino_rot<-sample(nrow(base),nrow(base)*(taxa/100))
base[-ids_treino_rot,"class"] <- NA
base_treino_self_training<-base
base_rotulados_ini <-base[ids_treino_rot,]
base_treino_self_training$class
base_treino_self_training$class = good
base_treino_self_training$class = "good"
base_treino_self_training<-base
base_treino_self_training$class == "good"
base_treino_self_training$class
base_rotulados_ini$class
form = as.formula(paste(classe,'~', '.'))
data = base_treino_self_training
learner = learner('rpartXse',list(se=0.5))
predFunc = 'f'
thrConf=0.9
maxIts=10
percFull=1
verbose=F
data$class
N <- NROW(data)
N_instancias_por_classe <- ddply(data,~class,summarise,number_of_distinct_orders=length(class))
N_classes <- NROW(N_instancias_por_classe)-1 # uso do -1 pq N_instancias_por_classe tem uma linha com a quantidade de exemplos não rotulados
N_instancias_por_classe
N_classes
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
