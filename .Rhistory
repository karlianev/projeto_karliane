it
qtd_Exemplos_Rot
nrow(data[new,])
nrow(data[new,]) >= N_classes*5
nrow(conj_treino)
nrow(data[new,])
conj_treino <- join_all(list(conj_treino,data[new,]), type='full')
nrow(conj_treino)
classificador <- naiveBayes(as.factor(class) ~ .,conj_treino)
matriz <- table(predict(classificador,base_rotulados_ini),base_rotulados_ini$class)
acc_local <- ((sum(diag(matriz)) / N) * 100)
thrConf<-thrConf+0.05
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
thrConf
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
thrConf
it <- it+1
it
qtd_Exemplos_Rot
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
nrow(data[new,])
nrow(data[new,]) >= N_classes*5
conj_treino <- join_all(list(conj_treino,data[new,]), type='full')
nrow(conj_treino)
cat('tx_incl',taxa,'IT.',it_g,'BD',bd_g,thrConf_g,'\t nr. added exs. =',nr_added_exs_g,'\n')
nrow(conj_treino)
nrow(data[new,])
conj_treino <- join_all(list(conj_treino,data[new,]), type='full')
nrow(conj_treino)
it
t
k
i
j
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
taxa <- j*5
base_original <- read.arff("letter.arff")
bd_nome <- "letter"
source('C:/local_R/projeto_karliane/selftrain_modificado2/organiza_dados.R')
form <- as.formula(paste(classe,'~', '.'))
data <- base_treino_self_training
learner <- learner("naiveBayes", list())
predFunc <- 'func'
thrConf=0.9
maxIts=100
percFull=1
verbose=TRUE
N <- NROW(data)
N_instancias_por_classe <- ddply(data,~class,summarise,number_of_distinct_orders=length(class))
N_classes <- NROW(N_instancias_por_classe)-1 # uso do -1 pq N_instancias_por_classe tem uma linha com a quantidade de exemplos nÃ£o rotulados
it <- 0
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
totalrot <- 0
exs_add <- c()
sup <- which(!is.na(data[,as.character(form[[2]])])) #sup recebe o indice de todos os exemplos rotulados
it <- it+1
it
qtd_Exemplos_Ro
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
nrow(data[new,])
N_classes*5
nrow(data[new,]) >= N_classes*5
conj_treino <- data[new,]
classificador <- naiveBayes(as.factor(class) ~ .,conj_treino)
matriz <- table(predict(classificador,base_rotulados_ini),base_rotulados_ini$class)
matriz
length(base_rotulados_ini$class)
acc_local <- ((sum(diag(matriz)) / length(base_rotulados_ini$class)) * 100)
acc_local
thrConf<-thrConf+0.05
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
nrow(data[new,]) >= N_classes*5
conj_treino <- data[new,]
classificador <- naiveBayes(as.factor(class) ~ .,conj_treino)
matriz <- table(predict(classificador,base_rotulados_ini),base_rotulados_ini$class)
acc_local <- ((sum(diag(matriz)) / length(base_rotulados_ini$class)) * 100)
acc_local
acc_local>=80
thrConf<-thrConf+0.05
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
nrow(conj_treino)
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
nrow(data[new,])
nrow(data[new,]) >= N_classes*5
conj_treino <- join_all(list(conj_treino,data[new,]), type='full')
nrow(conj_treino)
classificador <- naiveBayes(as.factor(class) ~ .,conj_treino)
matriz <- table(predict(classificador,base_rotulados_ini),base_rotulados_ini$class)
acc_local <- ((sum(diag(matriz)) / length(base_rotulados_ini$class)) * 100)
acc_local>=80
thrConf<-thrConf+0.05
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
nrow(conj_treino)
nrow(data[new,])
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
nrow(data[new,]) >= N_classes*5
conj_treino <- join_all(list(conj_treino,data[new,]), type='full')
nrow(conj_treino)
data[new,]
length(conj_treino)
length(data[new,])
list(conj_treino,data[new,])
dados <- list(conj_treino,data[new,])
conj_treino <- join_all(dfs = dados , type='full')
nrow(dados)
nrow(conj_treino)
conj_treino
dados <- list(data[new,], conj_treino)
conj_treino <- join_all(dfs = dados , type='full')
nrow(conj_treino)
a <- data[new,]
b <- conj_treino
nrow(a)
nrow(conj_treino)
dados <- list(a, b)
nrow(dados)
length(dados)
dados
conj_treino <- join_all(list(a,b), type='full')
nrow(conj_treino)
dados <- list(a, b)
conj_treino <- join_all(dados, type='full')
nrow(conj_treino)
?join_all
conj_treino <- join_all(dfs = dados, type='full', match = 'all')
nrow(conj_treino)
classificador <- naiveBayes(as.factor(class) ~ .,conj_treino)
matriz <- table(predict(classificador,base_rotulados_ini),base_rotulados_ini$class)
acc_local <- ((sum(diag(matriz)) / length(base_rotulados_ini$class)) * 100)
acc_local>=80
thrConf<-thrConf+0.05
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learner,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] >= thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <<-c(it_g,it)
bd_g <<-c(bd_g,bd_nome)
thrConf_g <<-c(thrConf_g,thrConf)
nr_added_exs_g <<-c(nr_added_exs_g,length(new))
tx_g <<- c(tx_g, taxa)
}
if (length(new)) {
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
soma_Conf <- sum(soma_Conf, probPreds[new,2])
qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])
totalrot <- totalrot + qtd_Exemplos_Rot
sup <- c(sup,(1:N)[-sup][new])
}
if(length(new)==0){
thrConf<-max(probPreds[,2]) #FALTOU FAZER USANDO A M?DIA DAS PREDI??ES.
#thrConf<-mean(probPreds[,2])
}
it <- it+1
it
qtd_Exemplos_Rot
nrow(data[new,]) >= N_classes*5
a <- data[new,]
b <- conj_treino
dados <- list(a, b)
nrow(a)
nrow(b)
conj_treino <- join_all(dfs = dados, type='full', match = 'all')
nrow(conj_treino)
conj_treino <- c()
nrow(conj_treino)
conj_treino
conj_treino <- join_all(dfs = dados, type='full', match = 'all')
nrow(conj_treino)
a <- data[new,]
b <- conj_treino
dados <- list(a, b)
nrow(a)
nrow
nrow(b)
conj_treino <- join_all(dfs = dados)
nrow(conj_treino)
dfs <- list(
a = data.frame(x = 1:10, a = runif(10)),
b = data.frame(x = 1:10, b = runif(10)),
c = data.frame(x = 1:10, c = runif(10))
)
join_all(dfs)
a
b
dfs <- list(
a = data.frame(x = 1:10, a = runif(10)),
b = data.frame(x = 1:10, b = runif(10)),
c = data.frame(x = 1:10, c = runif(10))
)
dfs
join_all(dfs)
join_all(dfs, "x")
join_all(dfs, type='full')
base1 <- read.arff("letter.arff")
base2 <- read.arff("bupa.arff");
nrow(base1)
nrow(base2)
base3 <- list(base1,base2)
join_all(base3, type="all")
join_all(base3, type="full")
base4 <- join_all(base3, type="full")
nrow(base4)
base5 <- read.arff("segment.arff")
nrow(base5)
base4 <- join_all(list(base4,base5), type="full")
nrow(base4)
base4 <- join_all(dfs=list(base4,base5), type="full")
nrow(base4)
base1 <- read.arff("letter.arff")
base2 <- read.arff("bupa.arff");
base3 <- list(base1,base2)
base4 <- join_all(base3, type="full")
nrow(base1)
nrow(base2)
nrow(base4)
base5 <- join_all(list(base4,base1), type= "full")
nrow(base5)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
TX
tx
data_arquivo
data_arquivo_acc
tx
bd
acc_g
base 1 <- read.arff("segment.arff")
base1 <- read.arff("segment.arff")
base1 <- read.arff("bupa.arff")
base1 <- read.arff("segment.arff")
base2 <- read.arff("bupa.arff")
nrow(base1)
nrow(base2)
merge(base1,base2)
rbind(base1,base2)
?rbind
ncol(base1)
ncol(base2)
base2 <- read.arff("bupa.arff")
nrow(base2)
ncol(base2)
dim(base2)
base3 <- read.arff("bupa.arff")
dim(base3)
rbind(base2,base3)
base4 <- rbind(base2,base3)
nrow(base4)
base4 <- rbind(base4,base3)
nrow(base4)
base4 <- rbind(base4,base2)
nrow(base4)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
source('C:/local_R/projeto_karliane/selftrain_modificado2/script_main.R', echo=TRUE)
